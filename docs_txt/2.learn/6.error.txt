Handling Errors
    HTTPException: Because it's a Python exception, you don't return it, you raise it.
    1st way: raise HTTPException(status_code=404, detail="Item not found")
    2nd way: Create a custom model exception
    3rd way: Overriding default functions
        RequestValidationError: Raised when a STRING is sending when function expect an INTEGER
        from starlette.exceptions import HTTPException as StarletteHTTPException 
            Overriding StarletteHTTPException -> It will be the response of evert HTTPException -> 'from fastapi import HTTPException'

Path Operation Configuration
    Notice that these parameters are passed directly to the path operation decorator, not to your path operation function
        Response Status Code: status_code
        Tags: tags
        Summary and description: summary | description
        Description from docstring
        Response description: response_description
        Deprecate a path operation: deprecated

JSON Compatible Encoder
    Where you need to convert a data type (like a Pydantic model) to something compatible with JSON

Body - Updates
    (Optionally) use PATCH instead of PUT.
    Retrieve the stored data.
    Put that data in a Pydantic model.
    Generate a dict without default values from the input model (using exclude_unset).
    This way you can update only the values actually set by the user, instead of overriding values already stored with default values in your model.
    Create a copy of the stored model, updating its attributes with the received partial updates (using the update parameter).
    Convert the copied model to something that can be stored in your DB (for example, using the jsonable_encoder).
    This is comparable to using the model's .model_dump() method again, but it makes sure (and converts) the values to data types that can be converted to JSON, for example, datetime to str.
    Save the data to your DB.
    Return the updated model.
    '''
    stored_item_data = items[item_id] # Consulting from DB with item_id from path
    stored_item_model = Item(**stored_item_data) # Instance of my model
    update_data = item.dict(exclude_unset=True) # Data from body excluding the unset -> Preventing to update with default values
    updated_item = stored_item_model.copy(update=update_data) # Method of my instance to copy of the existing model passing update with data from body (dict)
    items[item_id] = jsonable_encoder(updated_item) # Saving on DB again passing a JSON
    return updated_item
    '''
    