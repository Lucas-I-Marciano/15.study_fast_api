Security
    OAuth2: It includes ways to authenticate using a "third party"
    OAuth 1:There was an OAuth 1, which is very different from OAuth2, and more complex, as it included direct specifications on how to encrypt the communication
    OpenID Connect: It just extends OAuth2 specifying some things that are relatively ambiguous in OAuth2
    OpenID (not "OpenID Connect"): That tried to solve the same thing as OpenID Connect, but was not based on OAuth2
    OpenAPI
        OpenAPI defines the following security schemes: apiKey, http, oauth2, openIdConnect

Security - First Steps
    tokenUrl="token" refers to a relative URL
    Because we are using a relative URL, if your API was located at https://example.com/, then it would refer to https://example.com/token

Simple OAuth2 with Password and Bearer
    OAuth2PasswordRequestForm will link with /token from OAuth2PasswordBearer
    On dependable function from OAuth2PasswordRequestForm that is the function to post path '/token', it must return: {"access_token": <your_token>, "token_type": "bearer"}
        All other function that will depend on OAuth2PasswordBearer will have on header: 'Authorization: Bearer <your_token>'

OAuth2 with Password (and hashing), Bearer with JWT tokens
    Main idea
    JWT will encode and decode your data that will be the token
    For password use context of from CryptContext -> passlib.context import CryptContext